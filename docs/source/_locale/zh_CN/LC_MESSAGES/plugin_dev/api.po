
msgid ""
msgstr ""
"Project-Id-Version:  mcdreforged\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-17 18:03+0800\n"
"PO-Revision-Date: 2021-01-24 09:02+0800\n"
"Last-Translator: Alex3236 <alex3236@qq.com>\n"
"Language: zh_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../plugin_dev/api.rst:3
msgid "API Packages for Plugins"
msgstr "插件的 API 包"

#: ../plugin_dev/api.rst:5
msgid ""
"When your plugin needs to import something from MCDR, rather than "
"directly import the package you want, you can import the packages in "
"``mcdreforged.api``"
msgstr "当你需要从 MCDR 中导入些东西时，除了直接从 MCDR 的内部实现中导入外，你还可以从 ``mcdreforged.api`` 中进行导入。"

#: ../plugin_dev/api.rst:7
msgid ""
"``mcdreforged.api`` is the package for plugin developers to import. By "
"only importing from the api package, the import of the target class in "
"the plugin can be decoupled from the actual location of the target class."
" If MCDR refactors the target class and moves its location in the future,"
" only importing from the api package can keep your plugin unaffected"
msgstr ""
"``mcdreforged.api`` 是供插件开发者导入的包。如果你仅从 api "
"包进行导入目标类，就可以保证插件导入目标类的导入路径与目标类的实际路径解耦。如果以后 MCDR 重构了目标类，亦或是移动了目标类的位置，那么仅从 "
"api 包中导入目标类的插件就能丝毫不受影响。"

#: ../plugin_dev/api.rst:10
msgid "all"
msgstr "all"

#: ../plugin_dev/api.rst:16
msgid ""
"This is the simplest way to import everything you want for plugin "
"development. It's a life saver for lazy man"
msgstr "这是导入插件开发所需的所有内容的最简单的方法，是懒人的救命稻草。"

#: ../plugin_dev/api.rst:18
msgid "Continue reading to see what it will actually import"
msgstr "继续阅读以了解实际导入的内容。"

#: ../plugin_dev/api.rst:21
msgid "command"
msgstr "command"

#: ../plugin_dev/api.rst:23
msgid ""
"``command`` package contains the necessities for building a command tree "
"or create your own command, including command tree node classes, command "
"exceptions and some command utils"
msgstr "``command`` 包包含了建立命令树或创建自己的命令的必要条件，包括命令树节点类、命令异常和一些命令实用工具。"

#: ../plugin_dev/api.rst:25
msgid ""
"For example, if you want the class ``Literal`` and ``IllegalArgument`` "
"for building your command tree ``on_error`` exception handling, you can "
"do it like this"
msgstr ""
"例如，若你希望使用 ``Literal`` 和 ``IllegalArgument`` 来构建你命令树并处理 ``on_error`` "
"异常，则可以这样做："

#: ../plugin_dev/api.rst:31
msgid "Of course if you are lazy enough you can just"
msgstr "当然，如果你嫌麻烦，那么也可以："

#: ../plugin_dev/api.rst:38
msgid "decorator"
msgstr "decorator"

#: ../plugin_dev/api.rst:40
msgid ""
"``decorator`` package contains some useful function decorators for plugin"
" development"
msgstr "``decorator`` 包包含了一些对插件开发有用的函数装饰器。"

#: ../plugin_dev/api.rst:43
msgid "new_thread"
msgstr "new_thread"

#: ../plugin_dev/api.rst:45
msgid ""
"This is a one line solution to make your function executes in parallels. "
"When decorated with this decorator, functions will be executed in a new "
"daemon thread"
msgstr "这是一个让你的函数多线程异步执行的一行代码解决方案。当使用这个装饰器时，函数将在一个新的守护线程中执行。"

#: ../plugin_dev/api.rst:47
msgid ""
"This decorator only changes the return value of the function to the "
"created ``Thread`` instance. Beside the return value, it reserves all "
"signatures of the decorated function, so you can safely use the decorated"
" function as if there's no decorating at all"
msgstr ""
"这个装饰器只将函数的返回值改为创建的 ``Thread`` "
"实例。除了返回值，它还保留了被装饰的函数的所有签名，所以你可以安全地使用被装饰的函数，就像它们没有被装饰一样。"

#: ../plugin_dev/api.rst:49
msgid "It's also a simple compatible upgrade method for old MCDR 0.x plugins"
msgstr "这也是传统 MCDR 0.x 插件的简单的兼容升级方法。"

#: ../plugin_dev/api.rst:51 ../plugin_dev/api.rst:118 ../plugin_dev/api.rst:149
#: ../plugin_dev/api.rst:415 ../plugin_dev/api.rst:431
#: ../plugin_dev/api.rst:447 ../plugin_dev/api.rst:547
msgid "Example:"
msgstr "例如："

#: ../plugin_dev/api.rst:72
msgid ""
"The only difference between ``do_something1`` and ``do_something2`` is "
"that ``do_something2`` is decorated by ``@new_thread``. So when executing"
" ``do_something2``, it won't lag the following execution of MCDR like "
"``do_something1`` since ``do_something2`` will execute on another thread"
msgstr ""
"``do_something1`` 和 ``do_something2`` 的唯一区别是 ``do_something2`` 由 "
"``@new_thread`` 装饰。所以当执行 ``do_something2`` 时，它不会像 ``do_something1`` 那样阻塞 "
"MCDR 之后的操作，因为 ``do_something2`` 会在另一个线程上执行。"

#: ../plugin_dev/api.rst:74
msgid ""
"About the returned value of the decorated function, it's a "
"``FunctionThread`` object. Inherited from ``Thread``, it has 1 extra "
"method comparing to the ``Thread`` class:"
msgstr "关于被装饰的函数的返回值，它是一个 ``FunctionThread`` 对象。继承自 ``Thread``，它拥有 1 个额外的方法："

#: ../plugin_dev/api.rst:80
msgid ""
"As the name of the method, it's used to get the return value of the "
"original function. An ``RuntimeError`` will be risen if ``block=False`` "
"and the thread is still alive, then if exception occurs in the thread the"
" exception will be risen here"
msgstr ""
"正如该方法的名字所示，该方法是用获取原函数的返回值。如果 ``block=False`` 且线程仍在运行，``RuntimeError`` "
"将被抛出。如果线程运行过程中有异常发生，则此异常将被抛出。"

#: ../plugin_dev/api.rst:86
msgid ""
"If you only want to wait for the decorated function to complete, you can "
"simple use the ``join`` method from class ``threading.Thread``. Remember "
"the return value of the decorated function has already been changed in to"
" the ``FunctionThread`` instance"
msgstr ""
"如果你仅想等待被装饰的函数完成，你可以简单地使用类 ``threading.Thread`` 中的 ``join`` "
"方法。记住被装饰函数的返回值已经被修改为 ``Thread`` 实例。"

#: ../plugin_dev/api.rst:92
msgid ""
"In addition to simply and directly use a raw ``@new_thread``, it's "
"recommend to add a thread name argument for the decorator"
msgstr "除了简单直接使用原始的 ``@new_thread`` 之外，建议为装饰器添加一个线程名参数。"

#: ../plugin_dev/api.rst:101
msgid ""
"So when you logs something by ``server.logger``, a meaningful thread name"
" will be displayed instead of a plain and meaningless ``Thread-3``"
msgstr "这样，当你通过 ``server.logger`` 输出某些内容时，将显示一个有意义的线程名称，而不是简单无意义的 ``Thread-3``。"

#: ../plugin_dev/api.rst:103
msgid ""
"In case you want to access the original un-decorated function, you can "
"access the ``original`` field of the decorated function"
msgstr "如果你需要访问原未被装饰的函数，你可以访问被装饰的函数的 ``original`` 属性："

#: ../plugin_dev/api.rst:110
msgid "event_listener"
msgstr "event_listener"

#: ../plugin_dev/api.rst:112
msgid ""
"This decorator is used to register a custom event listener without "
"involving `PluginServerInterface <classes/PluginServerInterface.html"
"#register-event-listener>`__"
msgstr ""
"这个装饰器是用于在不使用 `PluginServerInterface <classes/PluginServerInterface.html"
"#register-event-listener>`__ 的前提下注册自定义事件监听器"

#: ../plugin_dev/api.rst:114
msgid ""
"It accepts a single str or PluginEvent indicating the event you are "
"listening to as parameter, and will register the function as the callback"
" of the given listener"
msgstr "它接受单个 str 或 PluginEvent 作为参数，代表着你打算监听的事件，然后它将会将被装饰的函数作为对应监听器的回调函数"

#: ../plugin_dev/api.rst:116
msgid ""
"It's highly suggested to use this decorator only in the entry point of "
"your plugin so it can work correctly and register the event listener in "
"the correct time"
msgstr "强烈建议你仅在插件的 `入口点 <basic.html#entrypoint>`__ 使用此装饰器，以便它可以正常工作，且在正确的时间注册事件监听器"

#: ../plugin_dev/api.rst:126 ../plugin_dev/api.rst:158
msgid "Which is equivalent to:"
msgstr "等价于："

#: ../plugin_dev/api.rst:134
msgid "spam_proof"
msgstr "spam_proof"

#: ../plugin_dev/api.rst:136
msgid ""
"Use a lock to protect the decorated function from being invoked on "
"multiple threads at the same time"
msgstr "用一个锁来保护被装饰的函数，避免它被多个线程同时调用"

#: ../plugin_dev/api.rst:138
msgid ""
"If a multiple-invocation happens, only the first invocation can be "
"executed normally, other invocations will be skipped"
msgstr "在“多重同时调用”发生时，只有第一个函数调用能被成功执行，其他的函数调用将被跳过"

#: ../plugin_dev/api.rst:140
msgid ""
"The type of the lock can be specified with the ``lock_class`` parameter, "
"for example it can be ``threading.RLock`` (default) or ``threading.Lock``"
msgstr ""
"锁的类型可以用 ``lock_class`` 参数指定，比如可以设为 ``threading.RLock`` (默认值)或者 "
"``threading.Lock``"

#: ../plugin_dev/api.rst:142
msgid ""
"The return value of the decorated function is modified into a bool, "
"indicating if this invocation is executed normally"
msgstr "被装饰的函数的返回值被修改为一个 bool，代表这次函数调用是否正常地执行了"

#: ../plugin_dev/api.rst:144
msgid "The decorated function has 2 extra fields:"
msgstr "被修饰的函数拥有着 2 个额外的属性："

#: ../plugin_dev/api.rst:146
msgid "``original`` field: stores the original undecorated function"
msgstr "``original`` 属性：储存着原始的未被修饰的函数对象"

#: ../plugin_dev/api.rst:147
msgid "``lock`` field: stores the lock object used in the spam proof logic"
msgstr "``lock`` 属性：储存着防重复调用逻辑中使用的锁对象"

#: ../plugin_dev/api.rst:176
msgid "event"
msgstr "event"

#: ../plugin_dev/api.rst:178
msgid ""
"``event`` package contains the classes for creating custom events, and "
"classes of MCDR built-in events"
msgstr "``event`` 包包含用于创建自定义事件的类和 MCDR 内置事件的类。"

#: ../plugin_dev/api.rst:180
msgid ""
"You might already read the `dispatch_event <classes/ServerInterface.html"
"#dispatch-event>`__ method in ``ServerInterface`` class. It only accepts "
"a ``PluginEvent`` instance as its first parameter. So if you want to "
"dispatch your custom event, create a ``LiteralEvent`` for simpleness or a"
" custom event class inherited from ``PluginEvent``"
msgstr ""
"你可能已经读过 ``ServerInterface`` 类中的 `dispatch_event "
"<classes/ServerInterface.html#dispatch-event>`__ 方法。它只接受一个 "
"``PluginEvent`` 实例作为第一个参数。所以，如果你想分发你的自定义事件，为了简单起见，请创建一个 ``LiteralEvent`` "
"或一个继承自 ``PluginEvent`` 的自定义事件类。"

#: ../plugin_dev/api.rst:183
msgid "exception"
msgstr "exception"

#: ../plugin_dev/api.rst:185
msgid ""
"There some custom exceptions that is used in MCDR runtime e.g. "
"`ServerInterface <classes/ServerInterface.html>`__ methods. Here comes "
"the way to import them"
msgstr ""
"MCDR 运行时会使用一些自定义的异常，例如在调用 `ServerInterface "
"<classes/ServerInterface.html>`__ 的方法时。这是导入它们的方法。"

#: ../plugin_dev/api.rst:188
msgid "rcon"
msgstr "rcon"

#: ../plugin_dev/api.rst:190
msgid ""
"Package ``rcon`` contains a single class ``RconConnection``. It's is a "
"simply rcon client for connect to any Minecraft servers that supports "
"rcon protocol"
msgstr ""
"``rcon`` 包仅包含一个类—— ``RconConnection``。这是一个简单的 rcon 客户端，用于连接到任何支持 rcon 协议的"
" Minecraft 服务端。"

#: ../plugin_dev/api.rst:194
msgid "RconConnection"
msgstr "RconConnection"

#: ../plugin_dev/api.rst:200
msgid "Create a rcon client instance"
msgstr "创建一个 rcon 客户端实例。"

#: ../plugin_dev/api.rst:202
msgid "Parameter *address*: The address of the rcon server"
msgstr "参数 *address*：rcon 服务器的地址"

#: ../plugin_dev/api.rst:204
msgid "Parameter *port*: The port if the rcon server"
msgstr "参数 *port*：rcon服务器的端口"

#: ../plugin_dev/api.rst:206
msgid "Parameter *password*: The password of the rcon connection"
msgstr "参数 *password*：rcon服务器的密码"

#: ../plugin_dev/api.rst:208
msgid ""
"Keyword Parameter *logger*: An instance of ``logging.Logger``. It's used "
"to output some warning information like failing to receive a packet"
msgstr "关键字参数 *logger*：``logging.Logger`` 实例。它用于输出一些警告信息，例如未收到数据包。"

#: ../plugin_dev/api.rst:211
msgid "connect"
msgstr "connect"

#: ../plugin_dev/api.rst:217
msgid ""
"Start a connection to the rcon server and tries to login. If login "
"success it will return ``True``, otherwise ``False``"
msgstr "启动与 rcon 服务器的连接并尝试登录。如果登录成功，它将返回 ``True``，否则返回 ``False``。"

#: ../plugin_dev/api.rst:220
msgid "disconnect"
msgstr "disconnect"

#: ../plugin_dev/api.rst:226
msgid "Disconnect from the server"
msgstr "断开与服务器的连接。"

#: ../plugin_dev/api.rst:229
msgid "send_command"
msgstr "send_command"

#: ../plugin_dev/api.rst:235
msgid ""
"Send  command to the rcon server, and return the command execution result"
" form the server"
msgstr "将命令发送到 rcon 服务器，并从返回命令执行结果。"

#: ../plugin_dev/api.rst:237
msgid "Parameter *command*: The command you want to send to the server"
msgstr "参数 *command*：要发送到服务器的命令。"

#: ../plugin_dev/api.rst:239
msgid ""
"Parameter *max_retry_time*: The maximum retry time of the operation. This"
" method will return None if *max_retry_time* retries exceeded"
msgstr "参数 *max_retry_time*：操作的最大重试次数。如果重试次数超过 *max_retry_time*，则将返回 None。"

#: ../plugin_dev/api.rst:242
msgid "rtext"
msgstr "rtext"

#: ../plugin_dev/api.rst:244
msgid ""
"Recommend to read the page `Raw JSON text format "
"<https://minecraft.gamepedia.com/Raw_JSON_text_format>`__ in Minecraft "
"Wiki first"
msgstr ""
"建议先阅读 Minecraft Wiki 中的 `原始JSON文本格式 "
"<https://wiki.biligame.com/mc/%E5%8E%9F%E5%A7%8BJSON%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F>`__"
" 页面。"

#: ../plugin_dev/api.rst:246
msgid "This is an advanced text component library for Minecraft"
msgstr "这是一个用于Minecraft的高级文本组件库。"

#: ../plugin_dev/api.rst:248
msgid ""
"Inspired by the `MCD stext API <https://github.com/TISUnion/rtext>`__ "
"made by `Pandaria98 <https://github.com/Pandaria98>`__"
msgstr ""
"这部分受 `Pandaria98 <https://github.com/Pandaria98>`__ 制作的 `MCD stext API "
"<https://github.com/TISUnion/rtext>`__ 的启发，在此表达感谢。"

#: ../plugin_dev/api.rst:251
msgid "RColor"
msgstr "RColor"

#: ../plugin_dev/api.rst:253
msgid "``RColor`` is an enum class storing all Minecraft color codes"
msgstr "``RColor`` 是一个存储所有 Minecraft 颜色代码的枚举类。"

#: ../plugin_dev/api.rst:256
msgid "``RColor.black``"
msgstr "``RColor.black``"

#: ../plugin_dev/api.rst:257
msgid "``RColor.dark_blue``"
msgstr "``RColor.dark_blue``"

#: ../plugin_dev/api.rst:258
msgid "``RColor.dark_green``"
msgstr "``RColor.dark_green``"

#: ../plugin_dev/api.rst:259
msgid "``RColor.dark_aqua``"
msgstr "``RColor.dark_aqua``"

#: ../plugin_dev/api.rst:260
msgid "``RColor.dark_red``"
msgstr "``RColor.dark_red``"

#: ../plugin_dev/api.rst:261
msgid "``RColor.dark_purple``"
msgstr "``RColor.dark_purple``"

#: ../plugin_dev/api.rst:262
msgid "``RColor.gold``"
msgstr "``RColor.gold``"

#: ../plugin_dev/api.rst:263
msgid "``RColor.gray``"
msgstr "``RColor.gray``"

#: ../plugin_dev/api.rst:264
msgid "``RColor.dark_gray``"
msgstr "``RColor.dark_gray``"

#: ../plugin_dev/api.rst:265
msgid "``RColor.blue``"
msgstr "``RColor.blue``"

#: ../plugin_dev/api.rst:266
msgid "``RColor.green``"
msgstr "``RColor.green``"

#: ../plugin_dev/api.rst:267
msgid "``RColor.aqua``"
msgstr "``RColor.aqua``"

#: ../plugin_dev/api.rst:268
msgid "``RColor.red``"
msgstr "``RColor.red``"

#: ../plugin_dev/api.rst:269
msgid "``RColor.light_purple``"
msgstr "``RColor.light_purple``"

#: ../plugin_dev/api.rst:270
msgid "``RColor.yellow``"
msgstr "``RColor.yellow``"

#: ../plugin_dev/api.rst:271
msgid "``RColor.white``"
msgstr "``RColor.white``"

#: ../plugin_dev/api.rst:272
msgid "``RColor.reset``"
msgstr "``RColor.reset``"

#: ../plugin_dev/api.rst:275
msgid "RStyle"
msgstr "RStyle"

#: ../plugin_dev/api.rst:277
msgid "``RStyle`` is an enum class storing all Minecraft text styles"
msgstr "``RStyle`` 是一个存储所有 Minecraft 文本样式的枚举类。"

#: ../plugin_dev/api.rst:280
msgid "``RStyle.bold``"
msgstr "``RStyle.bold``"

#: ../plugin_dev/api.rst:281
msgid "``RStyle.italic``"
msgstr "``RStyle.italic``"

#: ../plugin_dev/api.rst:282
msgid "``RStyle.underlined``"
msgstr "``RStyle.underlined``"

#: ../plugin_dev/api.rst:283
msgid "``RStyle.strike_through``"
msgstr "``RStyle.strike_through``"

#: ../plugin_dev/api.rst:284
msgid "``RStyle.obfuscated``"
msgstr "``RStyle.obfuscated``"

#: ../plugin_dev/api.rst:287
msgid "RAction"
msgstr "RAction"

#: ../plugin_dev/api.rst:289
msgid "``RAction`` is a enum class storing all click event actions"
msgstr "``RAction`` 是一个存储所有点击事件动作的枚举类。"

#: ../plugin_dev/api.rst:292
msgid "``RAction.suggest_command``"
msgstr "``RAction.suggest_command``"

#: ../plugin_dev/api.rst:293
msgid "``RAction.run_command``"
msgstr "``RAction.run_command``"

#: ../plugin_dev/api.rst:294
msgid "``RAction.open_url``"
msgstr "``RAction.open_url``"

#: ../plugin_dev/api.rst:295
msgid "``RAction.open_file``"
msgstr "``RAction.open_file``"

#: ../plugin_dev/api.rst:296
msgid "``RAction.copy_to_clipboard``"
msgstr "``RAction.copy_to_clipboard``"

#: ../plugin_dev/api.rst:299
msgid "RTextBase"
msgstr "RTextBase"

#: ../plugin_dev/api.rst:301
msgid ""
"``RTextBase`` is an abstract class of text component. It's the base class"
" of ``RText`` and ``RTextList``"
msgstr "``RTextBase`` 是文本组件的一个抽象类，是 ``RText`` 和 ``RTextList`` 的基类。"

#: ../plugin_dev/api.rst:304
msgid "to_json_object"
msgstr "to_json_object"

#: ../plugin_dev/api.rst:310 ../plugin_dev/api.rst:330
#: ../plugin_dev/api.rst:341 ../plugin_dev/api.rst:352
#: ../plugin_dev/api.rst:363
msgid "Abstract method"
msgstr "抽象方法"

#: ../plugin_dev/api.rst:312
msgid ""
"Return an object representing it's data that can be serialized into json "
"string"
msgstr "返回一个代表其数据的对象，该对象可以被序列化为 json 字符串。"

#: ../plugin_dev/api.rst:315
msgid "to_json_str"
msgstr "to_json_str"

#: ../plugin_dev/api.rst:321
msgid ""
"Return a json formatted str representing it's data. It can be used as the"
" second parameter in command ``/tellraw <target> <message>`` and more"
msgstr ""
"返回一个表示其数据的 json 格式字符串。它可以作为命令 ``/tellraw <target> <message>`` "
"中的第二个参数，以及更多的参数。"

#: ../plugin_dev/api.rst:324
msgid "to_plain_text"
msgstr "to_plain_text"

#: ../plugin_dev/api.rst:332
msgid ""
"Return a plain text for console display. Click event and hover event will"
" be ignored"
msgstr "返回纯文本以供控制台显示。点击事件和悬停事件将被忽略。"

#: ../plugin_dev/api.rst:335
msgid "copy"
msgstr "copy"

#: ../plugin_dev/api.rst:343
msgid "Return a copy version of itself"
msgstr "返回其自身。"

#: ../plugin_dev/api.rst:346
msgid "set_color"
msgstr "set_color"

#: ../plugin_dev/api.rst:354
msgid "Set the color of the text and return the text component itself"
msgstr "设置文本的颜色并返回文本组件本身。"

#: ../plugin_dev/api.rst:357
msgid "set_styles"
msgstr "set_styles"

#: ../plugin_dev/api.rst:365
msgid "Set the styles of the text and return the text component itself"
msgstr "设置文本的样式并返回文本组件本身。"

#: ../plugin_dev/api.rst:368
msgid "set_click_event"
msgstr "set_click_event"

#: ../plugin_dev/api.rst:374
msgid ""
"Set the click event with given *action* and *value* and return the text "
"component itself"
msgstr "用给定的 *action* 和 *value* 设置点击事件，并返回文本组件本身。"

#: ../plugin_dev/api.rst:376
msgid "Parameter *action*: The type of the action"
msgstr "参数 *action*：动作的类型"

#: ../plugin_dev/api.rst:378
msgid "Parameter *value*: The string value of the action"
msgstr "参数 *value*：操作的字符串值"

#: ../plugin_dev/api.rst:380
msgid "Method ``c`` is the short form of method ``set_click_event``"
msgstr "方法 ``c`` 是方法` `set_click_event`` 的简写。"

#: ../plugin_dev/api.rst:383
msgid "set_hover_text"
msgstr "set_hover_text"

#: ../plugin_dev/api.rst:389
msgid ""
"Set the hover text with given *\\*args* and return the text component "
"itself"
msgstr "使用给定的 *\\*args* 设置悬停文本并返回文本组件本身。"

#: ../plugin_dev/api.rst:391
msgid ""
"Parameter *action*: The elements be used to create a ``RTextList`` "
"instance. The ``RTextList`` instance is used as the actual hover text"
msgstr "参数 *action*：用于创建 ``RTextList`` 实例的元素。``RTextList`` 实例作为实际的悬停文本使用。"

#: ../plugin_dev/api.rst:393
msgid "Method ``h`` is the short form of method ``set_hover_text``"
msgstr "方法 ``h`` 是方法 ``set_hover_text`` 的简写。"

#: ../plugin_dev/api.rst:396
msgid "from_any"
msgstr "from_any"

#: ../plugin_dev/api.rst:403
msgid "Convert anything into a RText component"
msgstr "将任意对象转换为一个 RText 组件"

#: ../plugin_dev/api.rst:406
msgid "join"
msgstr "join"

#: ../plugin_dev/api.rst:413
msgid ""
"Just like method `join "
"<https://docs.python.org/3/library/stdtypes.html#str.join>`__ in class "
"``str``, it concatenate any number of texts with ``divider``"
msgstr ""
"就像 ``str`` 类的 `join <https://docs.python.org/zh-"
"cn/3/library/stdtypes.html#str.join>`__ 方法一样，它使用 ``divider`` 连接任意数量的文本。"

#: ../plugin_dev/api.rst:422
msgid "format"
msgstr "format"

#: ../plugin_dev/api.rst:429
msgid ""
"Just like method `format "
"<https://docs.python.org/3/library/stdtypes.html#str.format>`__ in class "
"``str``, it uses ``*args`` and ``**kwargs`` to build a formatted RText "
"component based on the formatter ``fmt``"
msgstr ""
"就像 ``str`` 类的 `format <https://docs.python.org/zh-"
"cn/3/library/stdtypes.html#str.format>`__ 方法一样，它使用 ``*args`` 及 "
"``**kwargs`` 在 ``fmt`` 的基础上进行格式化并生成一个 RText 组件。"

#: ../plugin_dev/api.rst:438
msgid "from_json_object"
msgstr "from_json_object"

#: ../plugin_dev/api.rst:445
msgid "Convert a json object into a RText component"
msgstr "将一个 json 对象转换为一个 RText 组件"

#: ../plugin_dev/api.rst:454
msgid "RText"
msgstr "RText"

#: ../plugin_dev/api.rst:456
msgid "The regular text component class"
msgstr "常规文本组件类"

#: ../plugin_dev/api.rst:462
msgid ""
"Create an ``RText`` object with specific text, color and style. "
"``styles`` can be a ``RStyle`` or a collection of ``RStyle``"
msgstr "用特定的文本，颜色和样式创建一个 ``RText`` 对象，其中样式可以是 ``RStyle`` 或 ``RStyle`` 的集合。"

#: ../plugin_dev/api.rst:465 ../plugin_dev/api.rst:470
msgid "RTextTranslation"
msgstr "RTextTranslation"

#: ../plugin_dev/api.rst:467
msgid "The translation text component class. It's almost the same as ``RText``"
msgstr "翻译文本组件类。几乎和 ``RText`` 相同。"

#: ../plugin_dev/api.rst:476
msgid ""
"Create a RTextTranslation object with specific translation_key. The rest "
"of the parameters are the same to ``RText``"
msgstr "使用特定的 ``translation_key`` 创建一个 ``RTextTranslation`` 对象。其余参数与 ``RText`` 相同。"

#: ../plugin_dev/api.rst:478
msgid ""
"Example: ``RTextTranslation('advancements.nether.root.title', "
"color=RColor.red)``"
msgstr ""
"例如：``RTextTranslation('advancements.nether.root.title', "
"color=RColor.red)``"

#: ../plugin_dev/api.rst:481 ../plugin_dev/api.rst:486
msgid "RTextList"
msgstr "RTextList"

#: ../plugin_dev/api.rst:483
msgid "A list of RTextBase objects"
msgstr "由 RTextBase 对象组成的列表。"

#: ../plugin_dev/api.rst:492
msgid "Use the given *\\*args* to create a ``RTextList``"
msgstr "使用给定的 *\\*args* 创建 ``RTextList`` 。"

#: ../plugin_dev/api.rst:494 ../plugin_dev/api.rst:505
msgid ""
"Objects in ``*args`` can be a ``str``, a ``RTextBase`` or any classes "
"implemented ``__str__`` method. All of them will be convert to ``RText``"
msgstr ""
"``*args`` 中的对象可以是 ``str``，`RTextBase`` 或任何实现 __str__ 方法的类。所有的这些对象都将被转换为 "
"``RText``。"

#: ../plugin_dev/api.rst:497
msgid "append"
msgstr "append"

#: ../plugin_dev/api.rst:503
msgid ""
"Add several elements to the end of the current ``RTextList``, then return"
" the ``RTextList`` component itself"
msgstr "在当前 ``RTextList`` 的末尾添加几个元素，然后返回 ``RTextList`` 组件本身。"

#: ../plugin_dev/api.rst:508
msgid "is_empty"
msgstr "is_empty"

#: ../plugin_dev/api.rst:514
msgid ""
"Return a bool indicating if the ``RTextList`` is empty. In other words, "
"has no child element"
msgstr "返回一个布尔值，指示 ``RTextList`` 是否为空——换句话说——有没有子元素。"

#: ../plugin_dev/api.rst:517 ../plugin_dev/api.rst:524
msgid "RTextMCDRTranslation"
msgstr "RTextMCDRTranslation"

#: ../plugin_dev/api.rst:519
msgid "The translation text component used in MCDR"
msgstr "MCDR 翻译文本组件类"

#: ../plugin_dev/api.rst:521
msgid ""
"When MCDR is running, it will use the `tr "
"<classes/ServerInterface.html#tr>`__ method in ``ServerInterface`` class "
"as the translating method, and the language of MCDR as the fallback "
"translation language"
msgstr ""
"当 MCDR 正在运行时，它将使用 ``ServerInterface`` 类中的 `tr "
"<classes/ServerInterface.html#tr>`__ 方法作为翻译的方法，并使用 MCDR 的语言作为默认语言。"

#: ../plugin_dev/api.rst:530
msgid ""
"Create a ``RTextMCDRTranslation`` component with necessary parameters for"
" translation"
msgstr "使用与翻译相关的必要参数创建一个 ``RTextMCDRTranslation`` 组件。"

#: ../plugin_dev/api.rst:533
msgid "language_context"
msgstr "language_context"

#: ../plugin_dev/api.rst:541
msgid ""
"Create a context where all ``RTextMCDRTranslation`` will use the given "
"language to translate within this context"
msgstr "创建一个上下文，在其中所有的 ``RTextMCDRTranslation`` 将会使用给定的语言来进行翻译。"

#: ../plugin_dev/api.rst:543
msgid ""
"It's mostly used when you want a translated str or Minecraft json text "
"object corresponding to this component under a specific language"
msgstr "它主要在你想要在特定语言下，获得该文本组件对应的翻译后的字符串或翻译后的 Minecraft json 文本时使用。"

#: ../plugin_dev/api.rst:545
msgid ""
"MCDR will automatically apply this context with `user's preferred "
"language <../preference.html#language>`__ right before sending messages "
"to a player or the console"
msgstr ""
"MCDR 将自动地于发送信息至玩家或控制台前，使用 `用户的偏好语言 <../preference.html#language>`__ "
"应用该上下文管理器。"

#: ../plugin_dev/api.rst:561
msgid "types"
msgstr "types"

#: ../plugin_dev/api.rst:563
msgid ""
"Who doesn't want a complete type checking to help you reduce silly "
"mistakes etc. when coding your plugin? If you want to add type hints to "
"the server interface or command source parameter, here's the package for "
"you to import those Usually-used classes"
msgstr "谁不希望在编写插件时，有一个检查器来帮助你减少愚蠢的错误呢？如果你想指定类型以让 IDE 知道你在写什么，这里有一个包可以让你导入一些常用的类。"

#: ../plugin_dev/api.rst:575
msgid "utils"
msgstr "utils"

#: ../plugin_dev/api.rst:577
msgid "Some useful kits"
msgstr "一些使用工具集"

#: ../plugin_dev/api.rst:580
msgid "Serializable"
msgstr "Serializable"

#: ../plugin_dev/api.rst:582
msgid "A abstract class for easy serializing / deserializing"
msgstr "一个用于便捷序列化/反序列化的抽象类。"

#: ../plugin_dev/api.rst:584
msgid ""
"Inherit it and declare the fields of your class with type annotations, "
"that's all you need to do"
msgstr "继承它，并在你的子类中使用类型注解声明属性，你所需要做的就这么多。"

#: ../plugin_dev/api.rst:598
msgid ""
"You can also declare default value when declaring type annotations, then "
"during deserializing, if the value is missing, a `copy "
"<https://docs.python.org/3/library/copy.html#copy.copy>`__ of the default"
" value will be assigned"
msgstr ""
"你也可以在声明类型注解时声明属性的默认值，这样在反序列化的过程中，如果值缺失，则默认值的 `拷贝 <https://docs.python.org"
"/zh-cn/3/library/copy.html#copy.copy>`__ 将会被赋值"

#: ../plugin_dev/api.rst:611
msgid "Enum class will be serialized into its member name"
msgstr "类 Enum 会被序列化为它的枚举成员名称"

#: ../plugin_dev/api.rst:631
msgid "Serializable class nesting is also supported"
msgstr "类 Serializable 的嵌套也是支持的"
