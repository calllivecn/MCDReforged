
msgid ""
msgstr ""
"Project-Id-Version:  mcdreforged\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-12 14:16+0800\n"
"PO-Revision-Date: 2021-01-24 09:17+0800\n"
"Last-Translator: Alex3236 <alex3236@qq.com>\n"
"Language: zh_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../plugin_dev/classes/ServerInterface.rst:3
msgid "ServerInterface"
msgstr "ServerInterface"

#: ../plugin_dev/classes/ServerInterface.rst:5
msgid ""
"ServerInterface is the interface with lots of API for plugins to interact"
" with the server. Its sub-class `PluginServerInterface "
"<PluginServerInterface.html>`__ contains extra APIs for plugins to "
"control the plugin itself"
msgstr ""
"ServerInterface 是插件与服务端交互的接口，包含许多 API。它的子类 `PluginServerInterface "
"<PluginServerInterface.html>`__ 包含了额外的让插件控制插件自己的 API。"

#: ../plugin_dev/classes/ServerInterface.rst:7
msgid ""
"The first argument in all plugin events is always the "
"PluginServerInterface. It's recommend to use ``server`` as the parameter "
"name of the ServerInterface argument which is widely used in this "
"document"
msgstr ""
"在所有插件事件中，第一个参数始终是 PluginServerInterface。建议使用 ``server`` 作为 "
"ServerInterface 参数的参数名，这在本文档中被广泛使用。"

#: ../plugin_dev/classes/ServerInterface.rst:9
msgid "You can check the code to see the implementation for deeper understanding"
msgstr "你可以通过查看源代码来了解它的实现方式，从而得到更加深入的理解。"

#: ../plugin_dev/classes/ServerInterface.rst:12
msgid "Property"
msgstr "属性"

#: ../plugin_dev/classes/ServerInterface.rst:15
msgid "logger"
msgstr "logger"

#: ../plugin_dev/classes/ServerInterface.rst:17
msgid "A logger for logging message to the console"
msgstr "一个用于将信息记录到控制台的记录器。"

#: ../plugin_dev/classes/ServerInterface.rst:19
msgid "Type: MCDReforgedLogger, which is inherited from ``logging.Logger``"
msgstr "类型：MCDReforgedLogger，继承自 ``logging.Logger``。"

#: ../plugin_dev/classes/ServerInterface.rst:22
msgid "Method"
msgstr "方法"

#: ../plugin_dev/classes/ServerInterface.rst:24
msgid ""
"Methods in the SererInterface object are also the API interface for "
"plugins to control the server and the MCDR"
msgstr "SererInterface 对象中的方法也是用于控制服务端和MCDR的插件的API接口。"

#: ../plugin_dev/classes/ServerInterface.rst:27
msgid "Utils"
msgstr "实用工具"

#: ../plugin_dev/classes/ServerInterface.rst:30
msgid "get_instance"
msgstr "get_instance"

#: ../plugin_dev/classes/ServerInterface.rst:37
msgid ""
"A class method, for plugins to get a ServerInterface instance anywhere as"
" long as MCDR is running"
msgstr "一个类方法，用于为插件在任何地方获取一个 ServerInterface 实例，只要 MCDR 正在运行。"

#: ../plugin_dev/classes/ServerInterface.rst:40
msgid "tr"
msgstr "tr"

#: ../plugin_dev/classes/ServerInterface.rst:46
msgid ""
"Return a translated text corresponded to the translation key and format "
"the text with given args and kwargs"
msgstr "返回一个代表着翻译键的翻译文本，并使用提供的 args 及 kwargs 进行格式化。"

#: ../plugin_dev/classes/ServerInterface.rst:48
msgid ""
"If args or kwargs contains `RText <../api.html#rtext>`__ element, then "
"the result will be a RText, otherwise the result will be a regular str"
msgstr ""
"如果 args 或者 kwargs 包含 `RText <../api.html#rtext>`__ 元素，则结果将为一个 "
"RText，否则结果将是一个 str。"

#: ../plugin_dev/classes/ServerInterface.rst:50
msgid ""
"If the translation key is not recognized, the return value will be the "
"translation key itself"
msgstr "如果翻译键未被识别，返回值将为翻译键本身。"

#: ../plugin_dev/classes/ServerInterface.rst:52
msgid ""
"See `here <../basic.html#translation>`__ for the ways to register "
"translations for your plugin"
msgstr "见 `此处 <../basic.html#translation>`__ 以了解为你的插件注册翻译的方法"

#: ../plugin_dev/classes/ServerInterface.rst:54
#: ../plugin_dev/classes/ServerInterface.rst:76
msgid "Parameter *translation_key*: The key of the translation"
msgstr "参数 *translation_key*：翻译键。"

#: ../plugin_dev/classes/ServerInterface.rst:56
#: ../plugin_dev/classes/ServerInterface.rst:78
msgid "Parameter *args*: The args to be formatted"
msgstr "参数 *args*：用于格式化的 args。"

#: ../plugin_dev/classes/ServerInterface.rst:58
msgid ""
"Keyword Parameter *language*: Specific language to be used in this "
"translation, or the language that MCDR is using will be used"
msgstr "关键字参数 *language*：指定在该次翻译中使用的语言。若未指定，则使用 MCDR 所使用的语言。"

#: ../plugin_dev/classes/ServerInterface.rst:60
#: ../plugin_dev/classes/ServerInterface.rst:80
msgid "Keyword Parameter *kwargs*: The kwargs to be formatted"
msgstr "关键字参数 *kwargs*：用于格式化的 kwargs。"

#: ../plugin_dev/classes/ServerInterface.rst:63
msgid "rtr"
msgstr "rtr"

#: ../plugin_dev/classes/ServerInterface.rst:70
msgid ""
"Return a RText derived component `RTextMCDRTranslation "
"<../api.html#rtextmcdrtranslation>`__, that only translates itself right "
"before displaying or serializing"
msgstr ""
"返回一个派生自 RText 的组件 `RTextMCDRTranslation "
"<../api.html#rtextmcdrtranslation>`__。它仅在被显示或被序列化前进行翻译。"

#: ../plugin_dev/classes/ServerInterface.rst:72
msgid ""
"Using this method instead of `tr() <#tr>`__ allows you to display your "
"texts in `user's preferred language <../../preference.html#language>`__ "
"automatically"
msgstr ""
"使用这一个方法而不是 `tr() <#tr>`__ 可以让你自动地使用 `用户的偏好语言 "
"<../../preference.html#language>`__ 展示你的文本。"

#: ../plugin_dev/classes/ServerInterface.rst:74
msgid ""
"Of course you can construct ``RTextMCDRTranslation`` yourself instead of "
"using this method if you want"
msgstr "当然如果你愿意的话，除了使用该方法，你也可以自己手动构建 ``RTextMCDRTranslation``。"

#: ../plugin_dev/classes/ServerInterface.rst:83
msgid "as_basic_server_interface"
msgstr "as_basic_server_interface"

#: ../plugin_dev/classes/ServerInterface.rst:90
msgid ""
"Return a ServerInterface instance. The type of the return value is "
"exactly the ServerInterface"
msgstr "返回一个 ServerInterface 实例。返回值的类型等于 ServerInterface。"

#: ../plugin_dev/classes/ServerInterface.rst:92
msgid ""
"It's used for removing the plugin information inside "
"PluginServerInterface when you need to send a ServerInterface"
msgstr "它可用于在你想要传递一个 ServerInterface 时，移除 PluginServerInterface 中包含着的插件信息"

#: ../plugin_dev/classes/ServerInterface.rst:95
msgid "as_plugin_server_interface"
msgstr "as_plugin_server_interface"

#: ../plugin_dev/classes/ServerInterface.rst:102
msgid ""
"Return a PluginServerInterface instance. If current thread is not a MCDR "
"provided thread and the object is not a PluginServerInterface instance, "
"it will return None"
msgstr ""
"返回一个 PluginServerInterface 实例。如果当前的线程并非是 MCDR 提供的线程，并且本对象并非是一个 "
"PluginServerInterface 实例，返回 None。"

#: ../plugin_dev/classes/ServerInterface.rst:105
msgid "Server Control"
msgstr "服务端控制"

#: ../plugin_dev/classes/ServerInterface.rst:108
msgid "start"
msgstr "start"

#: ../plugin_dev/classes/ServerInterface.rst:114
msgid "Start the server. Return if the action succeed."
msgstr "启动服务端，并返回启动情况。"

#: ../plugin_dev/classes/ServerInterface.rst:116
msgid ""
"If the server is running or being starting by other plugin it will return"
" ``False``"
msgstr "如果服务端正在运行或正在由其他插件启动，它将返回 ``False``。"

#: ../plugin_dev/classes/ServerInterface.rst:119
msgid "stop"
msgstr "stop"

#: ../plugin_dev/classes/ServerInterface.rst:125
msgid ""
"Soft shutting down the server by sending the correct stop command to the "
"server"
msgstr "通过向服务端发送其对应的关闭指令指令来软关闭服务端。"

#: ../plugin_dev/classes/ServerInterface.rst:127
msgid "This option will not stop MCDR"
msgstr "此方法不会停止 MCDR。"

#: ../plugin_dev/classes/ServerInterface.rst:130
msgid "wait_for_start"
msgstr "wait_for_start"

#: ../plugin_dev/classes/ServerInterface.rst:136
msgid ""
"Wait until the server is able to start. In other words, wait until the "
"server is stopped"
msgstr "等待，直到到服务端能够被启动——换句话说，就是等待服务端停止。"

#: ../plugin_dev/classes/ServerInterface.rst:139
msgid "restart"
msgstr "restart"

#: ../plugin_dev/classes/ServerInterface.rst:145
msgid "Restart the server"
msgstr "重新启动服务端。"

#: ../plugin_dev/classes/ServerInterface.rst:147
msgid ""
"It will first soft stop the server and then wait until the server is "
"stopped, then start the server up"
msgstr "它首先会软停止服务端，然后等到服务端完全停止后，再启动服务端。"

#: ../plugin_dev/classes/ServerInterface.rst:150
msgid "stop_exit"
msgstr "stop_exit"

#: ../plugin_dev/classes/ServerInterface.rst:156
msgid "Soft stop the server and exit MCDR"
msgstr "软停止服务端并退出 MCDR。"

#: ../plugin_dev/classes/ServerInterface.rst:159
msgid "exit"
msgstr "exit"

#: ../plugin_dev/classes/ServerInterface.rst:165
msgid "Exit MCDR when the server is stopped"
msgstr "当服务端停止时，退出 MCDR。"

#: ../plugin_dev/classes/ServerInterface.rst:167
msgid "If the server is running return False otherwise return True"
msgstr "如果服务端正在运行，返回 False，否则将执行操作并返回 True。"

#: ../plugin_dev/classes/ServerInterface.rst:169
msgid "Example usage:"
msgstr "示例用法："

#: ../plugin_dev/classes/ServerInterface.rst:180
msgid "set_exit_after_stop_flag"
msgstr "set_exit_after_stop_flag"

#: ../plugin_dev/classes/ServerInterface.rst:187
msgid ""
"Set the flag that indicating if MCDR should exit when the server has "
"stopped"
msgstr "设置用于指示 MCDR 在服务器停止时是否应退出的标志。"

#: ../plugin_dev/classes/ServerInterface.rst:189
msgid ""
"If set to true, after the server stops MCDR will exit, otherwise (set to "
"false) MCDR will just keep running"
msgstr "如果设置为 true，MCDR 将在服务器停止后退出，否则（设置为 false 时）MCDR 将继续运行。"

#: ../plugin_dev/classes/ServerInterface.rst:191
msgid "The flag value will be set to true everything when the server starts"
msgstr "当服务器启动时，该标志将被设置为 true。"

#: ../plugin_dev/classes/ServerInterface.rst:193
msgid "The flag value is displayed in line 5 in command ``!!MCDR status``"
msgstr "该标志值的值也会在命令 ``!!MCDR status`` 的第 5 行中显示。"

#: ../plugin_dev/classes/ServerInterface.rst:196
msgid "is_server_running"
msgstr "is_server_running"

#: ../plugin_dev/classes/ServerInterface.rst:202
msgid "Return if the server is running"
msgstr "服务端是否正在运行。"

#: ../plugin_dev/classes/ServerInterface.rst:205
msgid "is_server_startup"
msgstr "is_server_startup"

#: ../plugin_dev/classes/ServerInterface.rst:211
msgid "Return if the server has started up"
msgstr "服务端是否已经启动。"

#: ../plugin_dev/classes/ServerInterface.rst:214
msgid "is_rcon_running"
msgstr "is_rcon_running"

#: ../plugin_dev/classes/ServerInterface.rst:220
msgid "Return if MCDR's rcon is running"
msgstr "MCDR 的 RCON 服务是否正在运行。"

#: ../plugin_dev/classes/ServerInterface.rst:223
msgid "get_server_pid"
msgstr "get_server_pid"

#: ../plugin_dev/classes/ServerInterface.rst:229
msgid "Return the pid of the server process, None if the server is stopped"
msgstr "返回服务端进程的 pid，如果服务端已经停止，则返回 None。"

#: ../plugin_dev/classes/ServerInterface.rst:231
msgid ""
"Notes the process with this pid is a bash process, which is the parent "
"process of real server process you might be interested in"
msgstr "注意，这个 pid 对应的是一个 bash 进程，它是真实服务端进程的父进程。"

#: ../plugin_dev/classes/ServerInterface.rst:234
msgid "get_server_information"
msgstr "get_server_information"

#: ../plugin_dev/classes/ServerInterface.rst:240
msgid ""
"Return a ``ServerInformation`` object indicating the information of the "
"current server, interred from the output of the server"
msgstr "返回一个基于服务端输出推断得到的，储存着当前服务端的信息的 ``ServerInformation`` 对象"

#: ../plugin_dev/classes/ServerInterface.rst:242
msgid "It has following fields:"
msgstr "它拥有着以下属性："

#: ../plugin_dev/classes/ServerInterface.rst:244
msgid ""
"Server version name ``version``, a str. e.g. ``1.15.2``, ``1.17 Release "
"Candidate 1``"
msgstr "服务端版本名 ``version``，一个 str。如 ``1.15.2``、``1.17 Release Candidate 1``"

#: ../plugin_dev/classes/ServerInterface.rst:245
msgid "Server IP address ``ip``, a str. e.g. ``127.0.0.1``"
msgstr "服务端 IP 地址 ``ip``，一个 str。如 ``127.0.0.1``"

#: ../plugin_dev/classes/ServerInterface.rst:246
msgid "Server port ``port``, an int. e.g. ``25565``"
msgstr "服务端端口 ``port``，一个 int。如 ``25565``"

#: ../plugin_dev/classes/ServerInterface.rst:248
msgid ""
"Field(s) above might be None if the server is offline, or the related "
"information has not been parsed"
msgstr "如果服务端未启动，或者相关的信息未被解析，则以上若干个属性可能为 None。"

#: ../plugin_dev/classes/ServerInterface.rst:251
msgid "Text Interaction"
msgstr "文字交互"

#: ../plugin_dev/classes/ServerInterface.rst:254
msgid "execute"
msgstr "execute"

#: ../plugin_dev/classes/ServerInterface.rst:260
msgid ""
"Execute a command by sending the command content to server's standard "
"input stream"
msgstr "通过将指令内容发送到服务端的标准输入流来执行指令。"

#: ../plugin_dev/classes/ServerInterface.rst:262
msgid "Parameter *text*: The content of the command you want to send"
msgstr "参数 *text*：你要发送的指令内容。"

#: ../plugin_dev/classes/ServerInterface.rst:264
#: ../plugin_dev/classes/ServerInterface.rst:279
#: ../plugin_dev/classes/ServerInterface.rst:292
#: ../plugin_dev/classes/ServerInterface.rst:305
msgid ""
"Keyword Parameter *encoding*: The encoding method for the text. Leave it "
"empty to use the encoding method from the configuration of MCDR"
msgstr "关键字参数 *encoding*：文本的编码方法。留空以使用 MCDR 配置文件中的编码方法。"

#: ../plugin_dev/classes/ServerInterface.rst:267
msgid "tell"
msgstr "tell"

#: ../plugin_dev/classes/ServerInterface.rst:273
msgid "Use command like ``/tellraw`` to send the message to the specific player"
msgstr "使用 ``/tellraw`` 等指令向特定玩家发送消息。"

#: ../plugin_dev/classes/ServerInterface.rst:275
msgid "Parameter *player*: The name of the player you want to tell"
msgstr "参数 *player*：目标玩家的名字。"

#: ../plugin_dev/classes/ServerInterface.rst:277
msgid "Parameter *text*: the message you want to send to the player"
msgstr "参数 *text*：你想发送的信息。"

#: ../plugin_dev/classes/ServerInterface.rst:282
msgid "say"
msgstr "say"

#: ../plugin_dev/classes/ServerInterface.rst:288
msgid ""
"Use command like ``/tellraw @a`` to send the message to broadcast the "
"message in game"
msgstr "使用 ``/tellraw @a`` 等指令在游戏中广播消息。"

#: ../plugin_dev/classes/ServerInterface.rst:290
#: ../plugin_dev/classes/ServerInterface.rst:303
#: ../plugin_dev/classes/ServerInterface.rst:320
msgid "Parameter *text*: the message you want to send"
msgstr "参数 *text*：你要发送的消息。"

#: ../plugin_dev/classes/ServerInterface.rst:295
msgid "broadcast"
msgstr "broadcast"

#: ../plugin_dev/classes/ServerInterface.rst:301
msgid "Broadcast the message in game and to the console"
msgstr "在游戏和控制台中广播消息。"

#: ../plugin_dev/classes/ServerInterface.rst:308
msgid "reply"
msgstr "reply"

#: ../plugin_dev/classes/ServerInterface.rst:314
msgid "Reply to the source of the Info"
msgstr "对信息源的答复。"

#: ../plugin_dev/classes/ServerInterface.rst:316
msgid ""
"If the Info is from a player then use tell to reply the player, otherwise"
" if the Info is from the console use logger.info to output to the "
"console. In the rest of the situations, the Info is not from a user, a "
"IllegalCallError is raised"
msgstr ""
"如果 Info 来自玩家，那么使用 ``tell`` 方法来回复玩家，否则如果 Info 来自控制台，则使用 ``logger.info`` "
"来输出到控制台。 在其他情况下，如果 Info 不是来自用户，则会抛出 ``IllegalCallError``。"

#: ../plugin_dev/classes/ServerInterface.rst:318
msgid "Parameter *info*: the Info you want to reply to"
msgstr "参数 *info*：你要回复的目标。"

#: ../plugin_dev/classes/ServerInterface.rst:322
msgid ""
"Keyword Parameter *console_text*: If it's specified, console_text will be"
" used instead of text when replying to console"
msgstr "关键字参数 *console_text*：如果指定了该参数，那么在回复控制台时，将使用 console_text 来代替 。"

#: ../plugin_dev/classes/ServerInterface.rst:324
msgid "Keyword Parameter *encoding*: The encoding method for the text"
msgstr "关键字参数 *encoding*：文本的编码方法。"

#: ../plugin_dev/classes/ServerInterface.rst:327
msgid "Plugin Queries"
msgstr "插件查询"

#: ../plugin_dev/classes/ServerInterface.rst:330
msgid "get_plugin_metadata"
msgstr "get_plugin_metadata"

#: ../plugin_dev/classes/ServerInterface.rst:336
msgid ""
"Return the metadata of the specified plugin, or None if the plugin "
"doesn't exist"
msgstr "返回指定插件的元数据。若插件不存在，则返回 None。"

#: ../plugin_dev/classes/ServerInterface.rst:338
msgid "Parameter *plugin_id*: The plugin id of the plugin to query metadata"
msgstr "参数 *plugin_id*：要查询元数据的插件 ID。"

#: ../plugin_dev/classes/ServerInterface.rst:341
msgid "get_plugin_file_path"
msgstr "get_plugin_file_path"

#: ../plugin_dev/classes/ServerInterface.rst:347
msgid ""
"Return the file path of the specified plugin, or None if the plugin "
"doesn't exist"
msgstr "返回指定插件的文件路径。若插件不存在，则返回 None。"

#: ../plugin_dev/classes/ServerInterface.rst:349
msgid "Parameter *plugin_id*: The plugin id of the plugin to query file path"
msgstr "参数 *plugin_id*：要查询文件路径的插件的 ID。"

#: ../plugin_dev/classes/ServerInterface.rst:352
msgid "get_plugin_instance"
msgstr "get_plugin_instance"

#: ../plugin_dev/classes/ServerInterface.rst:358
msgid ""
"Return the `entrypoint <../basic.html#entrypoint>`__ module instance of "
"the specific plugin, or None if the plugin doesn't exist"
msgstr "返回指定插件的 `入口点 <../basic.html#entrypoint>`__。若插件不存在，则返回 None。"

#: ../plugin_dev/classes/ServerInterface.rst:360
msgid ""
"If the target plugin is a `solo plugin <../plugin_format.html#solo-"
"plugin>`__ and it needs to react to events from MCDR, it's quite "
"important to use this instead of manually import the plugin you want, "
"since it's the only way to make your plugin be able to access the same "
"plugin instance to MCDR"
msgstr ""
"如果目标插件是一个 `单文件插件 <plugin_format.html#solo-plugin>`__ 且需要对 MCDR "
"的事件做出反应，那么请使用这个功能而不是手动导入（``import``）你想要的插件。这是因为这个 API 是唯一能让你的插件获得与 MCDR "
"所使用的插件实例相同的方法。"

#: ../plugin_dev/classes/ServerInterface.rst:362
msgid "Parameter *plugin_id*: The plugin id of the plugin you want"
msgstr "参数 *plugin_id*：你想要的插件的 ID。"

#: ../plugin_dev/classes/ServerInterface.rst:364
#: ../plugin_dev/classes/ServerInterface.rst:510
msgid "Example:"
msgstr "例如："

#: ../plugin_dev/classes/ServerInterface.rst:378
msgid "get_plugin_list"
msgstr "get_plugin_list"

#: ../plugin_dev/classes/ServerInterface.rst:384
msgid ""
"Return a list containing all **loaded** plugin id like ``[\"my_plugin\", "
"\"another_plugin\"]``"
msgstr ""
"返回一个包含所有 **已加载** 插件的 ID 列表，例如：``[\"my_plugin_id\", "
"\"another_plugin_id\"]``。"

#: ../plugin_dev/classes/ServerInterface.rst:387
msgid "get_unloaded_plugin_list"
msgstr "get_unloaded_plugin_list"

#: ../plugin_dev/classes/ServerInterface.rst:393
msgid ""
"Return a list containing all **unloaded** plugin file path like "
"``[\"plugins/MyPlugin.mcdr\"]``"
msgstr "返回一个包含所有 **未加载** 插件的文件路径列表，例如：``[\"plugins/MyPlugin.mcdr\"]``。"

#: ../plugin_dev/classes/ServerInterface.rst:396
msgid "get_disabled_plugin_list"
msgstr "get_disabled_plugin_list"

#: ../plugin_dev/classes/ServerInterface.rst:402
msgid ""
"Return a list containing all **disabled** plugin file path like "
"``[\"plugins/MyPlugin.mcdr.disabled\"]``"
msgstr "返回一个包含所有 **被禁用** 插件的文件路径列表，例如：``[\"plugins/MyPlugin.mcdr.disabled\"]``。"

#: ../plugin_dev/classes/ServerInterface.rst:405
msgid "get_all_metadata"
msgstr "get_all_metadata"

#: ../plugin_dev/classes/ServerInterface.rst:411
msgid ""
"Return a dict containing metadatas of all loaded plugin with (plugin_id, "
"metadata) as key-value pair"
msgstr "返回一个包含所有加载的插件元数据的字典，键值对为 (插件 id, 元数据)"

#: ../plugin_dev/classes/ServerInterface.rst:414
msgid "Plugin Operations"
msgstr "插件操作"

#: ../plugin_dev/classes/ServerInterface.rst:416
msgid ""
"**Notes**: All plugin manipulation will trigger a dependency check, which"
" might cause unwanted plugin operations"
msgstr "**注**：所有的插件操作都会触发依赖性检查——这可能会导致不必要的插件操作。"

#: ../plugin_dev/classes/ServerInterface.rst:419
msgid "load_plugin"
msgstr "load_plugin"

#: ../plugin_dev/classes/ServerInterface.rst:425
msgid ""
"Load a plugin from the given file path. Return if the plugin gets loaded "
"successfully"
msgstr "从给定的文件路径加载一个插件，并返回插件加载是否成功。"

#: ../plugin_dev/classes/ServerInterface.rst:427
msgid ""
"Parameter *plugin_file_path*: The file path of the plugin to load. "
"Example: ``plugins/my_plugin.py``"
msgstr "参数 *plugin_file_path*：要加载插件的文件路径。 例如：``plugins/my_plugin.py``。"

#: ../plugin_dev/classes/ServerInterface.rst:430
msgid "enable_plugin"
msgstr "enable_plugin"

#: ../plugin_dev/classes/ServerInterface.rst:436
msgid ""
"Enable an unloaded plugin from the given path. Return if the plugin gets "
"enabled successfully"
msgstr "从给定的文件路径启用一个被禁用的插件，并返回插件是否被成功启用。"

#: ../plugin_dev/classes/ServerInterface.rst:438
msgid ""
"Parameter *plugin_file_path*: The file path of the plugin to enable. "
"Example: \"plugins/my_plugin.py.disabled\""
msgstr "参数 *plugin_file_path*：要启用插件的文件路径。例如：``plugin/my_plugin.py.disabled``。"

#: ../plugin_dev/classes/ServerInterface.rst:441
msgid "reload_plugin"
msgstr "reload_plugin"

#: ../plugin_dev/classes/ServerInterface.rst:447
msgid ""
"Reload a plugin specified by plugin id. Return a bool indicating if the "
"plugin gets reloaded successfully, or None if plugin not found"
msgstr "重载一个由插件 ID 给定的插件，并返回一个 bool 表示插件是否被成功重载，若插件不存在则返回 None。"

#: ../plugin_dev/classes/ServerInterface.rst:449
msgid ""
"Parameter *plugin_id*: The id of the plugin to reload. Example: "
"\"my_plugin\""
msgstr "参数 *plugin_id*：要重新加载的插件的 ID。例如：``my_plugin_id``。"

#: ../plugin_dev/classes/ServerInterface.rst:452
msgid "unload_plugin"
msgstr "unload_plugin"

#: ../plugin_dev/classes/ServerInterface.rst:458
msgid ""
"Unload a plugin specified by plugin id. Return a bool indicating if the "
"plugin gets unloaded successfully, or None if plugin not found"
msgstr "卸载一个由插件 ID 给定的插件，并返回一个 bool 表示插件是否被成功卸载，若插件不存在则返回 None。"

#: ../plugin_dev/classes/ServerInterface.rst:460
msgid ""
"Parameter *plugin_id*: The id of the plugin to unload. Example: "
"\"my_plugin\""
msgstr "参数 *plugin_id* : 要卸载的插件的 ID。例如：``my_plugin_id``。"

#: ../plugin_dev/classes/ServerInterface.rst:463
msgid "disable_plugin"
msgstr "disable_plugin"

#: ../plugin_dev/classes/ServerInterface.rst:469
msgid ""
"Disable a plugin specified by plugin id. Return a bool indicating if the "
"plugin gets disabled successfully, or None if plugin not found"
msgstr "禁用一个由插件 ID 给定的插件，并返回一个 bool 表示插件是否被成功禁用，若插件不存在则返回 None。"

#: ../plugin_dev/classes/ServerInterface.rst:471
msgid ""
"Parameter *plugin_id*: The id of the plugin to disable. Example: "
"\"my_plugin\""
msgstr "参数 *plugin_id* : 要禁用的插件的 ID。例如：``my_plugin_id``。"

#: ../plugin_dev/classes/ServerInterface.rst:474
msgid "refresh_all_plugins"
msgstr "refresh_all_plugins"

#: ../plugin_dev/classes/ServerInterface.rst:480
msgid ""
"Reload all plugins, load all new plugins and then unload all removed "
"plugins"
msgstr "重新加载所有插件，加载所有新插件，并卸载所有被删除的插件。"

#: ../plugin_dev/classes/ServerInterface.rst:483
msgid "refresh_changed_plugins"
msgstr "refresh_changed_plugins"

#: ../plugin_dev/classes/ServerInterface.rst:489
msgid ""
"Reload all changed plugins, load all new plugins and then unload all "
"removed plugins"
msgstr "重新加载所有 **更改过** 的插件，加载所有新插件，并卸载所有删除的插件。"

#: ../plugin_dev/classes/ServerInterface.rst:492
msgid "dispatch_event"
msgstr "dispatch_event"

#: ../plugin_dev/classes/ServerInterface.rst:498
msgid "Dispatch an event to all loaded plugins"
msgstr "向所有加载的插件分发事件。"

#: ../plugin_dev/classes/ServerInterface.rst:500
msgid ""
"The event will be immediately dispatch if it's on the task executor "
"thread, or gets enqueued if it's on other thread"
msgstr "如果该事件在任务执行者线程上，则会被立即触发。如果在其他线程上，则会被 入队等候 (enqueued)。"

#: ../plugin_dev/classes/ServerInterface.rst:502
msgid ""
"Parameter *event*: The event to dispatch. It need to be a ``PluginEvent``"
" instance. For simple usage, you can create a ``LiteralEvent`` instance "
"for this argument"
msgstr ""
"参数 *event*：要发送的事件。它必须是一个 ``PluginEvent`` 实例。为了更简单地使用，你可以为这个参数创建一个 "
"``LiteralEvent`` 实例。"

#: ../plugin_dev/classes/ServerInterface.rst:504
msgid ""
"Parameter *args*: The argument that will be used to invoke the event "
"listeners. An ServerInterface instance will be automatically added to the"
" beginning of the argument list"
msgstr "参数 *args*：用于调用事件监听器的参数。 一个 ``ServerInterface`` 实例将被自动添加到参数列表的开头。"

#: ../plugin_dev/classes/ServerInterface.rst:506
msgid ""
"Parameter *on_executor_thread*: By default the event will be dispatched "
"in a new task in task executor thread. If it's set to false. The event "
"will be dispatched immediately"
msgstr ""
"参数 *on_executor_thread*：在默认值的情况下，该事件会被派发至任务执行者 (task executor) "
"线程中分发。如果它被设置为 False，则事件将会被立即分发。"

#: ../plugin_dev/classes/ServerInterface.rst:508
msgid ""
"**Note**: You cannot dispatch an event with the same event id to any MCDR"
" built-in event"
msgstr "**注意**：你不能发送 与任何一个 MCDR 内置事件拥有相同事件 ID 的事件。"

#: ../plugin_dev/classes/ServerInterface.rst:512
msgid "For the event dispatcher plugin"
msgstr "对于分发事件的插件："

#: ../plugin_dev/classes/ServerInterface.rst:518
msgid "In the event listener plugin"
msgstr "对于监听事件的插件："

#: ../plugin_dev/classes/ServerInterface.rst:528
msgid "Permission"
msgstr "权限"

#: ../plugin_dev/classes/ServerInterface.rst:531
msgid "get_permission_level"
msgstr "get_permission_level"

#: ../plugin_dev/classes/ServerInterface.rst:537
msgid "Return an int indicating permission level number the given object has"
msgstr "返回一个 int，表示给定对象拥有的权限级别。"

#: ../plugin_dev/classes/ServerInterface.rst:539
msgid ""
"The object could be a str indicating the name of a player, an Info "
"instance or a command source"
msgstr "``obj`` 对象可以是一个表示玩家名的 str，一个 Info 实例或者一个指令源"

#: ../plugin_dev/classes/ServerInterface.rst:541
msgid "Parameter *obj*: The object your are querying"
msgstr "参数 *obj* : 你要查询的对象。这个对象可以是 str (玩家名字)，Info实例或一个指令源。"

#: ../plugin_dev/classes/ServerInterface.rst:543
msgid ""
"It raises ``TypeError`` if the type of the given object is not supported "
"for permission querying"
msgstr "如果给定对象的类型不支持权限查询，则抛出 ``TypeError``。"

#: ../plugin_dev/classes/ServerInterface.rst:546
msgid "set_permission_level"
msgstr "set_permission_level"

#: ../plugin_dev/classes/ServerInterface.rst:552
msgid ""
"Set the permission level of the given player. It raises ``TypeError`` if "
"the value parameter doesn't proper represent a permission level"
msgstr "设置给定玩家的权限级别。如果数值参数不是一个正确的权限级别，则抛出 ``TypeError``。"

#: ../plugin_dev/classes/ServerInterface.rst:554
msgid ""
"Parameter *player*: The name of the player that you want to set his/her "
"permission level"
msgstr "参数 *player*：你想设置权限级别的玩家名字。"

#: ../plugin_dev/classes/ServerInterface.rst:556
msgid ""
"Parameter *value*: The target permission level you want to set the player"
" to. It can be an int or a str as long as it's related to the permission "
"level. Available examples: 1, '1', 'user'"
msgstr ""
"参数 *value*：你想将玩家设置为的目标权限级别，它可以是一个代表权限级别的 int 或 str。例如：``1``， ``'1'``，或  "
"``'user'``"

#: ../plugin_dev/classes/ServerInterface.rst:559
msgid "Command"
msgstr "指令"

#: ../plugin_dev/classes/ServerInterface.rst:562
msgid "get_plugin_command_source"
msgstr "get_plugin_command_source"

#: ../plugin_dev/classes/ServerInterface.rst:568
msgid "Return a simple plugin command source for e.g. command execution"
msgstr "返回一个简单的插件指令源，用于例如执行指令时使用。"

#: ../plugin_dev/classes/ServerInterface.rst:570
msgid ""
"It's not player or console, it has maximum permission level, it use "
"`logger <#logger>`__ for replying"
msgstr "该指令源不是玩家或控制台，它拥有最高的权限等级，它使用 `logger <#logger>`__ 来处理回复"

#: ../plugin_dev/classes/ServerInterface.rst:573
msgid "execute_command"
msgstr "execute_command"

#: ../plugin_dev/classes/ServerInterface.rst:579
msgid "Execute a single command using the command system of MCDR"
msgstr "使用 MCDR 的指令系统来执行一条指令"

#: ../plugin_dev/classes/ServerInterface.rst:581
msgid "Parameter *command*: The command you want to execute"
msgstr "参数 *command*：你想要执行的指令"

#: ../plugin_dev/classes/ServerInterface.rst:583
msgid ""
"Parameter *source*: The command source that is used to execute the "
"command. If it's not specified MCDR will use `get_plugin_command_source "
"<#get-plugin-command-source>`__ as fallback command source"
msgstr ""
"参数 *source*：用于执行该条指令的指令源。如果它未被指定，MCDR 将会使用 `get_plugin_command_source "
"<#get-plugin-command-source>`__ 来获得默认的指令源"

#: ../plugin_dev/classes/ServerInterface.rst:586
msgid "Preference"
msgstr "偏好"

#: ../plugin_dev/classes/ServerInterface.rst:589
msgid "get_preference"
msgstr "get_preference"

#: ../plugin_dev/classes/ServerInterface.rst:596
msgid ""
"Return the MCDR preference of the given object. The object can be a str "
"indicating the name of a player, or a command source. For command source,"
" only ``PlayerCommandSource`` and ``ConsoleCommandSource`` are supported"
msgstr ""
"返回给定对象的 MCDR 偏好。该对象可以是一个表示玩家名称的 str，或者是一个指令源。指令源仅支持 "
"``PlayerCommandSource`` 以及 ``ConsoleCommandSource``。"

#: ../plugin_dev/classes/ServerInterface.rst:598
msgid "Parameter *obj*: The object to querying preference"
msgstr "参数 *obj* : 你要查询的偏好的对象"

#: ../plugin_dev/classes/ServerInterface.rst:600
msgid ""
"It raises ``TypeError`` if the type of the given object is not supported "
"for preference querying"
msgstr "如果给定对象的类型不支持偏好查询，则抛出 ``TypeError``。"

#: ../plugin_dev/classes/ServerInterface.rst:603
msgid "Misc"
msgstr "其他"

#: ../plugin_dev/classes/ServerInterface.rst:606
msgid "is_on_executor_thread"
msgstr "is_on_executor_thread"

#: ../plugin_dev/classes/ServerInterface.rst:612
msgid "Return if the current thread is the task executor thread"
msgstr "当前线程是否为 任务执行者 (task executor) 线程。"

#: ../plugin_dev/classes/ServerInterface.rst:614
msgid ""
"Task executor thread is the main thread to parse messages and trigger "
"listeners where some ServerInterface APIs  are required to be invoked on"
msgstr "任务执行者线程 是解析消息和触发监听器的主线程，需要调用一些 ServerInterface API。"

#: ../plugin_dev/classes/ServerInterface.rst:617
msgid "rcon_query"
msgstr "rcon_query"

#: ../plugin_dev/classes/ServerInterface.rst:623
msgid ""
"Send command to the server through rcon connection. Return the result "
"that server returned from rcon. Return None if rcon is not running or "
"rcon query failed"
msgstr "通过 rcon 连接向服务端发送指令，并返回指令执行结果。 如果 rcon 没有运行或 rcon 执行失败，则返回 None。"

#: ../plugin_dev/classes/ServerInterface.rst:625
msgid "Parameter *command*: The command you want to send to the rcon server"
msgstr "参数 *command*：你要发送给 rcon 服务端的指令。"

#: ../plugin_dev/classes/ServerInterface.rst:628
msgid "get_mcdr_language"
msgstr "get_mcdr_language"

#: ../plugin_dev/classes/ServerInterface.rst:634
msgid "Return the current language MCDR is using"
msgstr "返回 MCDR 当前使用的语言。"

#: ../plugin_dev/classes/ServerInterface.rst:637
msgid "get_mcdr_config"
msgstr "get_mcdr_config"

#: ../plugin_dev/classes/ServerInterface.rst:643
msgid "Return the current config of MCDR as a dict"
msgstr "返回一个 dict 表示 MCDR 当前使用的配置信息。"

#: ../plugin_dev/classes/ServerInterface.rst:646
msgid "schedule_task"
msgstr "schedule_task"

#: ../plugin_dev/classes/ServerInterface.rst:652
msgid "Schedule a task to be run in task executor thread"
msgstr "在任务执行者 (task executor) 线程中添加一个任务"

#: ../plugin_dev/classes/ServerInterface.rst:654
msgid ""
"Parameter *callable_*: The callable object to be run. It should accept 0 "
"parameter"
msgstr "参数 *callable_* : 将要被执行的可调用对象。它应当接受 0 个参数"

#: ../plugin_dev/classes/ServerInterface.rst:656
msgid "Keyword Parameter *block*: If blocks until the callable finished execution"
msgstr "关键字参数 *block*：是否需要阻塞至可调用对象执行结束。"

#: ../plugin_dev/classes/ServerInterface.rst:658
msgid ""
"Keyword Parameter *timeout*: The timeout of the blocking operation if "
"``block=True``"
msgstr "关键字参数 *timeout*：若 ``block=True``，最大的阻塞时间。"

